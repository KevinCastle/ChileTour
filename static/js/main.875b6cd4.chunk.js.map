{"version":3,"sources":["serviceWorker.js","components/Slideshow.js","components/Card.js","services/CardAPI.js","components/Santiago.js","components/Header.js","index.js"],"names":["Boolean","window","location","hostname","match","folderDir","process","Slideshow","props","state","images","original","imageDir","items","this","autoPlay","showBullets","showThumbnails","showFullscreenButton","React","Component","Card","incluye","nombre","descripcion","map","el","index","key","opcional","CardAPI","services","axios","get","url","then","res","data","setState","Santiago","Header","className","src","alt","icon","faWhatsapp","faEnvelope","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kECfAC,EAAYC,qBAqCHC,E,kDAlCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,GAKb,EAAKC,OAAS,CACV,CACIC,SAAUN,EAAY,EAAKG,MAAMI,SAAW,UAEhD,CACID,SAAUN,EAAY,EAAKG,MAAMI,SAAW,UAEhD,CACID,SAAUN,EAAY,EAAKG,MAAMI,SAAW,WAhBrC,E,qDAsBf,OACI,kBAAC,IAAD,CACIC,MAAOC,KAAKJ,OACZK,UAAU,EACVC,aAAa,EACbC,gBAAgB,EAChBC,sBAAsB,Q,GA7BdC,IAAMC,WCwBfC,EAzBF,SAACb,GACV,OACI,6BACKA,EAAMc,SACH,6BACA,2BAAId,EAAMe,QACV,kBAAC,EAAD,CAAWX,SAAUJ,EAAMI,WACvB,6BACI,2BAAIJ,EAAMgB,aACV,sCACA,4BACKhB,EAAMc,QAAQG,KAAI,SAACC,EAAIC,GAAL,OAAe,wBAAIC,IAAKD,GAAQD,OAEvD,uCACA,4BACKlB,EAAMqB,SAASJ,KAAI,SAACC,EAAIC,GAAL,OAAe,wBAAIC,IAAKD,GAAQD,WCf3DI,E,kDACjB,WAAYtB,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTsB,SAAU,IAJC,E,gEAQE,IAAD,OAChBC,IAAMC,IAAInB,KAAKN,MAAM0B,KAChBC,MAAK,SAAAC,GACF,IAAML,EAAWK,EAAIC,KACrB,EAAKC,SAAS,CAAEP,kB,+BAKxB,OACI,6BACI,iCACKjB,KAAKL,MAAMsB,SAASN,KAAI,SAACM,EAAUJ,GAAX,OACrB,kBAAC,EAAD,CACIC,IAAKD,EACLJ,OAAQQ,EAASR,OACjBC,YAAaO,EAASP,YACtBF,QAASS,EAAST,QAClBO,SAAUE,EAASF,SACnBjB,SAAUmB,EAASnB,oB,GA5BVO,IAAMC,WCQ5BmB,EATE,WAEb,OACI,6BACI,kBAAC,EAAD,CAASL,IAAI,iD,uBCwBVM,EA1BA,WACX,OACI,6BACI,yBAAKC,UAAU,qBACX,yBAAKA,UAAU,cAAcC,IAAKpC,yCAAyDqC,IAAI,KAC/F,8CAEJ,yBAAKF,UAAU,cACX,yBAAKA,UAAU,mBACX,uBAAGA,UAAU,QAAb,YACA,uBAAGA,UAAU,QAAb,cACA,uBAAGA,UAAU,QAAb,kBACA,uBAAGA,UAAU,QAAb,UACA,uBAAGA,UAAU,QAAb,qBAEJ,yBAAKA,UAAU,0BAEX,uBAAGA,UAAU,QAAb,IAAqB,kBAAC,IAAD,CAAiBG,KAAMC,MAA5C,mBACA,kBAAC,IAAD,CAAiBD,KAAME,MACvB,uBAAGL,UAAU,QAAb,iC,YCfpBM,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SNqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.875b6cd4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport ImageGallery from 'react-image-gallery';\r\n\r\nconst folderDir = process.env.PUBLIC_URL + '/images/';\r\n\r\nclass Slideshow extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n\r\n        };\r\n\r\n\r\n        this.images = [\r\n            {\r\n                original: folderDir + this.props.imageDir + \"/1.jpg\"\r\n            },\r\n            {\r\n                original: folderDir + this.props.imageDir + \"/2.jpg\"\r\n            },\r\n            {\r\n                original: folderDir + this.props.imageDir + \"/3.jpg\"\r\n            },\r\n        ];\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <ImageGallery\r\n                items={this.images}\r\n                autoPlay={true}\r\n                showBullets={true}\r\n                showThumbnails={false}\r\n                showFullscreenButton={false}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Slideshow;\r\n\r\n\r\n\r\n// https://www.npmjs.com/package/react-image-gallery\r\n","import React from 'react'\r\nimport Slideshow from './Slideshow';\r\n \r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div>\r\n            {props.incluye &&\r\n                <div>\r\n                <p>{props.nombre}</p>\r\n                <Slideshow imageDir={props.imageDir}/>\r\n                    <div>\r\n                        <p>{props.descripcion}</p>\r\n                        <p>Incluye</p>\r\n                        <ul>\r\n                            {props.incluye.map((el, index) => <li key={index}>{el}</li>)}\r\n                        </ul>\r\n                        <p>Opcional</p>\r\n                        <ul>\r\n                            {props.opcional.map((el, index) => <li key={index}>{el}</li>)}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport axios from 'axios';\r\nimport Card from '../components/Card';\r\n\r\nexport default class CardAPI extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            services: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(this.props.url)\r\n            .then(res => {\r\n                const services = res.data;\r\n                this.setState({ services });\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <section>\r\n                    {this.state.services.map((services, index) =>\r\n                        <Card\r\n                            key={index}\r\n                            nombre={services.nombre}\r\n                            descripcion={services.descripcion}\r\n                            incluye={services.incluye}\r\n                            opcional={services.opcional}\r\n                            imageDir={services.imageDir}\r\n                        />\r\n                    )}\r\n                </section>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport CardAPI from '../services/CardAPI';\r\n\r\nconst Santiago = () => {\r\n\r\n    return (\r\n        <div>\r\n            <CardAPI url='https://api.npoint.io/cef0bf8341dd206787a2'/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Santiago;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faWhatsapp } from '@fortawesome/free-brands-svg-icons';\r\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div>\r\n            <div className=\"header-background\">\r\n                <img className=\"header-logo\" src={process.env.PUBLIC_URL + \"/images/Header/chiletour.png\"} alt=\"\" />\r\n                <p> MY CHILE TOUR</p>\r\n            </div>\r\n            <div className=\"header-nav\">\r\n                <div className=\"header-nav-item\">\r\n                    <p className=\"item\">Santiago</p>\r\n                    <p className=\"item\">Viñedos</p>\r\n                    <p className=\"item\">Centros de Ski</p>\r\n                    <p className=\"item\">Playas</p>\r\n                    <p className=\"item\">Entretenimientos</p>\r\n                </div>\r\n                <div className=\"header-nav-item--right\">\r\n                    \r\n                    <p className=\"item\"> <FontAwesomeIcon icon={faWhatsapp} />+56 996 230 278</p>\r\n                    <FontAwesomeIcon icon={faEnvelope} />\r\n                    <p className=\"item\">pedropabloopazo@gmail.com</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import AppRouter from './routers/AppRouter';\nimport * as serviceWorker from './serviceWorker';\nimport Santiago from './components/Santiago';\nimport Header from './components/Header';\nimport 'normalize.css';\nimport './styles/styles.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header />\n    <Santiago />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}